version: "3.9"

x-celery-healthcheck: &celery-healthcheck
  healthcheck:
    test: "celery -b redis://${DOCKER_REDIS_HOST}:${DOCKER_REDIS_PORT} inspect ping || exit 1"
    interval: 10s
    timeout: 10s
    retries: 2

x-backend: &backend
  container_name: fregepoc-backend
  image: fregepoc-backend-image
  build: ./backend
  hostname: backend
  command: >
    sh -c "python manage.py migrate --noinput
    && python manage.py initadmin
    && python manage.py runserver
    0.0.0.0:${DOCKER_BACKEND_PORT}"
  ports:
    - "${DOCKER_EGRESS_IP}:${DOCKER_BACKEND_PORT}:${DOCKER_BACKEND_PORT}"
  depends_on:
    - fregepoc-postgres
    - fregepoc-redis
  volumes:
    - ./backend:/app
    - fregepoc_tmp:${DJANGO_DOWNLOAD_PATH}
  networks:
    - fregepoc-main
  profiles: [ "dev" ]
  restart: on-failure
  env_file:
    - .env

services:

# === [Common] ===

  fregepoc-redis:
    container_name: fregepoc-redis
    hostname: fregepoc-redis
    image: redis:7.0
    networks:
      - fregepoc-main
    expose:
      - "${DOCKER_REDIS_PORT}"
    profiles: [ "dev", "prod" ]
    restart: on-failure
    healthcheck:
      test: "redis-cli ping || exit 1"
      interval: 10s
      timeout: 10s
      retries: 2

  fregepoc-postgres:
    container_name: fregepoc-postgres
    hostname: fregepoc-postgres
    image: postgres:14.2
    environment:
      - POSTGRES_USER=${DJANGO_DATABASE_USER}
      - POSTGRES_PASSWORD=${DJANGO_DATABASE_PASSWORD}
      - POSTGRES_DB=${DJANGO_DATABASE_NAME}
    networks:
      - fregepoc-main
    expose:
      - "${DOCKER_POSTGRES_PORT}"
    profiles: [ "dev", "prod" ]
    restart: on-failure
    volumes:
      - fregepoc_postgresql_data:/var/lib/postgresql/data
    # Removing code below is a workaround for 'role "root" does not exist' error.
    # TODO: modification of healthcheck code below to error-free form.
    #healthcheck:
    #  test: "pg_isready -p ${DOCKER_POSTGRES_PORT} || exit 1"
    #  interval: 10s
    #  timeout: 10s
    #  retries: 2

  fregepoc-prometheus:
    image: prom/prometheus:v2.35.0
    container_name: fregepoc-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    expose:
      - ${DOCKER_PROMETHEUS_PORT}
    networks:
      - fregepoc-main
    profiles: [ "dev", "prod" ]
    restart: on-failure
    healthcheck:
      test: "wget -nv -t1 --spider http://localhost:${DOCKER_PROMETHEUS_PORT} || exit 1"
      interval: 10s
      timeout: 10s
      retries: 2

  fregepoc-loki:
    image: grafana/loki:2.7.4
    user: "1000"
    container_name: fregepoc-loki
    ports:
      - 3100:3100
    volumes:
      - ./loki/data:/loki
      # - ./loki/loki-config.yaml:/etc/loki/local-config.yaml
    # command: -config.file=/etc/loki/local-config.yaml
    networks:
      - fregepoc-main
    profiles: [ "dev", "prod" ]

  fregepoc-promtail:
    image: grafana/promtail:2.6.1
    container_name: fregepoc-promtail
    depends_on:
      - fregepoc-loki
    volumes:
      - ./loki/promtail-config.yaml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers
    networks:
      - fregepoc-main
    profiles: [ "dev", "prod" ]

# === [Dev] ===

  fregepoc-backend-dev:
    <<: *backend
    healthcheck:
      test: "curl -f http://localhost:${DOCKER_BACKEND_PORT}/ht || exit 1"
      interval: 10s
      timeout: 10s
      retries: 2

  fregepoc-flower-dev:
    <<: *backend
    container_name: fregepoc-flower-dev
    command: celery -A fregepoc flower
    ports:
      - 5555:5555
    expose:
      - 5555
    environment:
      CELERY_BROKER_URL: redis://fregepoc-redis
      CELERY_RESULT_BACKEND: redis://fregepoc-redis
    depends_on:
      - fregepoc-celery-worker-dev
      - fregepoc-celery-downloads-worker-dev
      - fregepoc-celery-crawl-worker-dev
      - fregepoc-redis
    profiles: [ "dev" ]
    healthcheck:
      test: "curl -f http://localhost:${DOCKER_FLOWER_PORT} || exit 1"
      interval: 10s
      timeout: 10s
      retries: 2

  # Autoreload on code change won't work without this setup
  #
  # fregepoc-celery-worker-dev:
  #   <<: [*backend, *celery-healthcheck]
  #   container_name: fregepoc-celery-worker-dev
  #   ports: []
  #   command: sh -c "python3 manage.py celery_dev_autoreload"
  #   profiles: [ "dev" ]

  fregepoc-celery-crawl-worker-dev:
      <<: [*backend, *celery-healthcheck]
      container_name: fregepoc-celery-crawl-worker-dev
      ports: []
      command: celery -A fregepoc worker -Q crawl -l info --concurrency=${CELERY_WORKER_CRAWL_CONCURRENCY} -n worker_crawl
      profiles: [ "dev" ]

  fregepoc-celery-downloads-worker-dev:
    <<: [*backend, *celery-healthcheck]
    container_name: fregepoc-celery-downloads-worker-dev
    ports: []
    command: celery -A fregepoc worker -Q downloads -l info --concurrency=${CELERY_WORKER_DOWNLOADS_CONCURRENCY} -n worker_downloads
    profiles: [ "dev" ]

  fregepoc-celery-worker-dev:
    <<: [*backend, *celery-healthcheck]
    container_name: fregepoc-celery-worker-dev
    ports: []
    command: celery -A fregepoc worker -Q celery -l info --concurrency=${CELERY_WORKER_BASE_CONCURRENCY} -n worker_celery
    profiles: [ "dev" ]

  fregepoc-grafana-dev: &grafana
    image: grafana/grafana:8.5.2
    container_name: fregepoc-grafana-dev
    depends_on:
      - fregepoc-prometheus
      - fregepoc-postgres
      - fregepoc-loki
      - fregepoc-promtail
    volumes:
      - fregepoc_grafana_storage:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_USERS_DEFAULT_THEME=dark
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    ports:
      - ${DOCKER_GRAFANA_PORT}:${DOCKER_GRAFANA_PORT}
    networks:
      - fregepoc-main
    env_file:
      - .env
    profiles: [ "dev" ]
    restart: on-failure
    healthcheck:
      test: "wget -nv -t1 --spider http://localhost:${DOCKER_GRAFANA_PORT}/api/health || exit 1"
      interval: 10s
      timeout: 10s
      retries: 2

  fregepoc-frontend-dev: &frontend
    container_name: fregepoc-frontend-dev
    hostname: fregepoc-frontend-dev
    build:
      context: frontend
      dockerfile: Dockerfile
    environment:
      - PORT=${DOCKER_FRONTEND_PORT}
      - REACT_APP_DOCKER_GRAFANA_HOST=fregepoc-grafana-dev
      - REACT_APP_DOCKER_GRAFANA_PORT=3000
      - DOCKER_FLOWER_HOST=fregepoc-flower-dev
      - DOCKER_FLOWER_PORT=5555
      - DJANGO_SUPERUSER_USERNAME=django_admin
      - DJANGO_SUPERUSER_PASSWORD=pass
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - /app/node_modules
      - ./frontend:/app
    command: npm start
    ports:
      - ${DOCKER_FRONTEND_PORT}:${DOCKER_FRONTEND_PORT}
    depends_on:
      - fregepoc-grafana-dev
    networks:
      - fregepoc-main
    profiles: [ "dev" ]
    restart: on-failure
    healthcheck:
      test: "wget -nv -t1 --spider http://localhost:${DOCKER_FRONTEND_PORT} || exit 1"
      interval: 10s
      timeout: 10s
      retries: 2
      start_period: 40s

# === [Prod] ===

  fregepoc-frontend-prod:
    <<: *frontend
    container_name: fregepoc-frontend-prod
    hostname: fregepoc-frontend-prod
    ports: []
    expose:
      - ${DOCKER_FRONTEND_PORT}
    environment:
      - PORT=${DOCKER_FRONTEND_PORT}
      - REACT_APP_DOCKER_GRAFANA_HOST=fregepoc-grafana-prod
      - REACT_APP_DOCKER_GRAFANA_PORT=3000
      - DOCKER_FLOWER_HOST=fregepoc-flower-dev
      - DOCKER_FLOWER_PORT=5555
      - NODE_ENV=production
      - VIRTUAL_HOST=${FRONTEND_HOSTNAME}
      - LETSENCRYPT_HOST=${FRONTEND_HOSTNAME}
    depends_on:
      - fregepoc-grafana-prod
    profiles: [ "prod" ]

  fregepoc-backend-prod:
    <<: *backend
    container_name: fregepoc-backend-prod
    command: >
      sh -c "python manage.py migrate --noinput
      && python manage.py initadmin
      && python manage.py collectstatic --noinput
      && gunicorn fregepoc.wsgi:application --bind 0.0.0.0:${DOCKER_BACKEND_PORT}"
    volumes:
      - fregepoc_tmp:${DJANGO_DOWNLOAD_PATH}
      - fregepoc_static_files:/app/static
    profiles: [ "prod" ]
    ports: []
    expose:
      - ${DOCKER_BACKEND_PORT}
    environment:
      - VIRTUAL_HOST=${BACKEND_HOSTNAME}
      - LETSENCRYPT_HOST=${BACKEND_HOSTNAME}
    healthcheck:
      test: "curl -f http://localhost:${DOCKER_BACKEND_PORT}/ht || exit 1"
      interval: 10s
      timeout: 10s
      retries: 2

  fregepoc-grafana-prod:
    <<: *grafana
    container_name: fregepoc-grafana-prod
    environment:
      - GF_USERS_DEFAULT_THEME=dark
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      # - GF_AUTH_ANONYMOUS_ENABLED=true
      # - GF_SECURITY_ALLOW_EMBEDDING=true
      # - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana/
      # - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - VIRTUAL_HOST=${FRONTEND_HOSTNAME}
      - LETSENCRYPT_HOST=${FRONTEND_HOSTNAME}
    profiles: [ "prod" ]
    expose:
      - ${DOCKER_FRONTEND_PORT}
    ports: []
    env_file: []

  fregepoc-flower-prod:
    <<: *backend
    container_name: fregepoc-flower-prod
    command: celery -A fregepoc flower
    expose:
      - ${DOCKER_FLOWER_PORT}
    environment:
      CELERY_BROKER_URL: redis://fregepoc-redis
      CELERY_RESULT_BACKEND: redis://fregepoc-redis
    depends_on:
      - fregepoc-celery-worker-prod
      - fregepoc-celery-downloads-worker-prod
      - fregepoc-celery-crawl-worker-prod
      - fregepoc-redis
    profiles: [ "prod" ]
    healthcheck:
      test: "curl -f http://localhost:${DOCKER_FLOWER_PORT} || exit 1"
      interval: 10s
      timeout: 10s
      retries: 2

  fregepoc-celery-crawl-worker-prod:
      <<: [*backend, *celery-healthcheck]
      container_name: fregepoc-celery-crawl-worker-prod
      ports: []
      command: celery -A fregepoc worker -Q crawl -l info --concurrency=${CELERY_WORKER_CRAWL_CONCURRENCY} -n worker_crawl
      profiles: [ "prod" ]

  fregepoc-celery-downloads-worker-prod:
    <<: [*backend, *celery-healthcheck]
    container_name: fregepoc-celery-downloads-worker-prod
    ports: []
    command: celery -A fregepoc worker -Q downloads -l info --concurrency=${CELERY_WORKER_DOWNLOADS_CONCURRENCY} -n worker_downloads
    profiles: [ "prod" ]

  fregepoc-celery-worker-prod:
    <<: [*backend, *celery-healthcheck]
    container_name: fregepoc-celery-worker-prod
    ports: []
    command: celery -A fregepoc worker -Q celery -l info --concurrency=${CELERY_WORKER_BASE_CONCURRENCY} -n worker_celery
    profiles: [ "prod" ]

  nginx-proxy:
    image: nginx
    # TODO: field below should be changed, but will require docker-gen
    #       reconfiguration in order for it to find this container properly
    container_name: nginx-proxy
    ports:
      - "${DOCKER_EGRESS_IP}:80:80"
      - "${DOCKER_EGRESS_IP}:443:443"
    volumes:
      - fregepoc_proxy_conf:/etc/nginx/conf.d
      - fregepoc_proxy_vhost:/etc/nginx/vhost.d
      - fregepoc_proxy_html:/usr/share/nginx/html
      - fregepoc_proxy_certs:/etc/nginx/certs:ro
      # TODO: this is a hack to get the nginx proxy to work with the django
      #       static files (currently there exists a blanket "api_static"
      #       location rule in egress.ngins.conf) - should be fixed
      - fregepoc_static_files:/var/www/backend/static
    restart: always
    profiles: [ "prod" ]
    networks:
      - fregepoc-main
    healthcheck:
      test: "curl -f localhost || exit 1"
      interval: 10s
      timeout: 10s
      retries: 2
      start_period: 1m

  docker-gen:
    image: nginxproxy/docker-gen
    container_name: fregepoc-nginx-proxy-gen
    command: >
      -notify-sighup nginx-proxy
      -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    volumes_from:
      - nginx-proxy
    volumes:
      - ./nginx/egress.nginx.conf:/etc/docker-gen/templates/nginx.tmpl:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    restart: on-failure
    profiles: [ "prod" ]
    networks:
      - fregepoc-main

  fregepoc-proxy-acme:
    image: nginxproxy/acme-companion:2.2
    container_name: fregepoc-proxy-acme
    hostname: fregepoc-proxy-acme
    restart: on-failure
    networks:
      - fregepoc-main
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - fregepoc_proxy_conf:/etc/nginx/conf.d
      - fregepoc_proxy_vhost:/etc/nginx/vhost.d
      - fregepoc_proxy_html:/usr/share/nginx/html
      - fregepoc_proxy_certs:/etc/nginx/certs:rw
    environment:
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
      - NGINX_PROXY_CONTAINER=fregepoc-proxy
    profiles: [ "tls" ]

networks:
  fregepoc-main:

volumes:
  fregepoc_postgresql_data:
  fregepoc_tmp:
  fregepoc_grafana_storage:

  # Production
  fregepoc_static_files:
  fregepoc_proxy_conf:
  fregepoc_proxy_vhost:
  fregepoc_proxy_html:
  fregepoc_proxy_certs:
